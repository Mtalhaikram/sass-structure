@use 'sass:map' as map;
@use 'sass:string' as string;


$primary-color: #111;
$white-color: #fff;
$blue-color: #070CB9;
$white-EF: #F0EEEF;
$dark-66: #666;

.primary-text{
    color: $primary-color !important;
}
.dark-text-66{
    color: $dark-66 !important;
}


@font-face {
    font-family: "HelveticaBold";
    src: url("/public/fonts/Helvetica-Bold.woff") format("woff");
}
@font-face {
    font-family: "HelveticaBoldOblique";
    src: url("/public/fonts/Helvetica-BoldOblique.woff") format("woff");
}
@font-face {
    font-family: "HelveticaCompressed";
    src: url("/public/fonts/helvetica-compressed.woff") format("woff");
}
@font-face {
    font-family: "HelveticaLight";
    src: url("/public/fonts/helvetica-light.woff") format("woff");
}
@font-face {
    font-family: "HelveticaOblique";
    src: url("/public/fonts/helvetica-oblique.woff") format("woff");
}
@font-face {
    font-family: "HelveticaRoundedBold";
    src: url("/public/fonts/helvetica-rounded-bold.woff") format("woff");
}
@font-face {
    font-family: "Helvetica";
    src: url("/public/fonts/Helvetica.woff") format("woff");
}


$font-family-bold: "HelveticaBold", sans-serif;
$font-family-boldOblique-: "HelveticaBoldOblique", sans-serif;
$font-family-compressed: "HelveticaCompressed", sans-serif;
$font-family-light: "HelveticaLight", sans-serif;
$font-family-oblique: "HelveticaOblique", sans-serif;
$font-family-roundedBold: "HelveticaRoundedBold", sans-serif;
$font-family-helvetica: "Helvetica", sans-serif;


.font-oblique{
    font-family: $font-family-oblique;
}

.font-helvetica{
    font-family: $font-family-helvetica;
}

/* Media Queries */
$media_queries: (
    'sm-mobile'    : "only screen and (max-width: 479px)",
    'lg-mobile'    : "only screen and (min-width: 480px) and (max-width: 767px)",
    'tablet'       : "only screen and (min-width: 768px) and (max-width: 1024px)",
    'laptop'       : "only screen and (min-width: 1025px) and (max-width: 1290px)",
    'desktop'      : "only screen and (min-width: 1291px) and (max-width: 1560px)",
    'tv'           : "only screen and (min-width: 1561px) and (max-width: 1920px)",
    'lg-tv'        : "only screen and (min-width: 1921px)",
    'retina2'      : "only screen and (-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)",
    'retina3'      : "only screen and (-webkit-min-device-pixel-ratio: 3) and (min-resolution: 288dpi)",
    'landscape'    : "screen and (orientation:landscape)",
    'portrait'     : "screen and (orientation:portrait)",
    'md-tablet'    : "only screen and (max-width: 960px)",


);

/* Mixin for Breakpoints */
@mixin for_breakpoint($breakpoints...) {
    @each $breakpoint in $breakpoints {
      $media-query: map.get($media_queries, $breakpoint);

      @if $media-query != null {
        @media #{string.unquote($media-query)} {
          @content;
        }
      } @else {
        @warn "Breakpoint `#{$breakpoint}` does not exist in \$media_queries.";
      }
    }
  }
